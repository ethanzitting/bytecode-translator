// FibonacciSeries.asm
    // Initialize SP to 256
    @256                       // 0
    D=A                        // 1
    @SP                        // 2
    M=D                        // 3
    // Initialize ARG to 400
    @400                       // 4
    D=A                        // 5
    @ARG                       // 6
    M=D                        // 7
    // Initialize THIS to 3000
    @3000                      // 8
    D=A                        // 9
    @THIS                      // 10
    M=D                        // 11
    // Initialize THAT to 3010
    @3010                      // 12
    D=A                        // 13
    @THAT                      // 14
    M=D                        // 15
    // Initialize TEMP to 5
    @5                         // 16
    D=A                        // 17
    @TEMP                      // 18
    M=D                        // 19


    // push argument 1
    @1                         // 20
    D=A                        // 21
    @ARG                       // 22
    D=D+M                      // 23
    @addr                      // 24
    M=D                        // 25
    @addr                      // 26
    A=M                        // 27
    D=M                        // 28
    @SP                        // 29
    A=M                        // 30
    M=D                        // 31
    @SP                        // 32
    M=M+1                      // 33


    // pop pointer 1
    @SP                        // 34
    M=M-1                      // 35
    @SP                        // 36
    A=M                        // 37
    D=M                        // 38
    @THAT                      // 39
    M=D                        // 40


    // push constant 0
    @0                         // 41
    D=A                        // 42
    @SP                        // 43
    A=M                        // 44
    M=D                        // 45
    @SP                        // 46
    M=M+1                      // 47


    // pop that 0
    @THAT                      // 48
    D=M                        // 49
    @0                         // 50
    D=D+A                      // 51
    @addr                      // 52
    M=D                        // 53
    @SP                        // 54
    M=M-1                      // 55
    A=M                        // 56
    D=M                        // 57
    @addr                      // 58
    A=M                        // 59
    M=D                        // 60


    // push constant 1
    @1                         // 61
    D=A                        // 62
    @SP                        // 63
    A=M                        // 64
    M=D                        // 65
    @SP                        // 66
    M=M+1                      // 67


    // pop that 1
    @THAT                      // 68
    D=M                        // 69
    @1                         // 70
    D=D+A                      // 71
    @addr                      // 72
    M=D                        // 73
    @SP                        // 74
    M=M-1                      // 75
    A=M                        // 76
    D=M                        // 77
    @addr                      // 78
    A=M                        // 79
    M=D                        // 80


    // push argument 0
    @0                         // 81
    D=A                        // 82
    @ARG                       // 83
    D=D+M                      // 84
    @addr                      // 85
    M=D                        // 86
    @addr                      // 87
    A=M                        // 88
    D=M                        // 89
    @SP                        // 90
    A=M                        // 91
    M=D                        // 92
    @SP                        // 93
    M=M+1                      // 94


    // push constant 2
    @2                         // 95
    D=A                        // 96
    @SP                        // 97
    A=M                        // 98
    M=D                        // 99
    @SP                        // 100
    M=M+1                      // 101


    // sub
    @SP                        // 102
    M=M-1                      // 103
    A=M                        // 104
    D=M                        // 105
    @SP                        // 106
    M=M-1                      // 107
    A=M                        // 108
    M=M-D                      // 109
    @SP                        // 110
    M=M+1                      // 111


    // pop argument 0
    @ARG                       // 112
    D=M                        // 113
    @0                         // 114
    D=D+A                      // 115
    @addr                      // 116
    M=D                        // 117
    @SP                        // 118
    M=M-1                      // 119
    A=M                        // 120
    D=M                        // 121
    @addr                      // 122
    A=M                        // 123
    M=D                        // 124


    // label MAIN_LOOP_START
(MAIN_LOOP_START)


    // push argument 0
    @0                         // 125
    D=A                        // 126
    @ARG                       // 127
    D=D+M                      // 128
    @addr                      // 129
    M=D                        // 130
    @addr                      // 131
    A=M                        // 132
    D=M                        // 133
    @SP                        // 134
    A=M                        // 135
    M=D                        // 136
    @SP                        // 137
    M=M+1                      // 138


    // if-goto COMPUTE_ELEMENT
    @SP                        // 139
    M=M-1                      // 140
    A=M                        // 141
    D=M                        // 142
    @COMPUTE_ELEMENT           // 143
    D;JNE                      // 144


    // goto END_PROGRAM
    @END_PROGRAM               // 145
    0;JEQ                      // 146


    // label COMPUTE_ELEMENT
(COMPUTE_ELEMENT)


    // push that 0
    @0                         // 147
    D=A                        // 148
    @THAT                      // 149
    D=D+M                      // 150
    @addr                      // 151
    M=D                        // 152
    @addr                      // 153
    A=M                        // 154
    D=M                        // 155
    @SP                        // 156
    A=M                        // 157
    M=D                        // 158
    @SP                        // 159
    M=M+1                      // 160


    // push that 1
    @1                         // 161
    D=A                        // 162
    @THAT                      // 163
    D=D+M                      // 164
    @addr                      // 165
    M=D                        // 166
    @addr                      // 167
    A=M                        // 168
    D=M                        // 169
    @SP                        // 170
    A=M                        // 171
    M=D                        // 172
    @SP                        // 173
    M=M+1                      // 174


    // add
    @SP                        // 175
    M=M-1                      // 176
    A=M                        // 177
    D=M                        // 178
    @SP                        // 179
    M=M-1                      // 180
    A=M                        // 181
    M=D+M                      // 182
    @SP                        // 183
    M=M+1                      // 184


    // pop that 2
    @THAT                      // 185
    D=M                        // 186
    @2                         // 187
    D=D+A                      // 188
    @addr                      // 189
    M=D                        // 190
    @SP                        // 191
    M=M-1                      // 192
    A=M                        // 193
    D=M                        // 194
    @addr                      // 195
    A=M                        // 196
    M=D                        // 197


    // push pointer 1
    @THAT                      // 198
    D=M                        // 199
    @SP                        // 200
    A=M                        // 201
    M=D                        // 202
    @SP                        // 203
    M=M+1                      // 204


    // push constant 1
    @1                         // 205
    D=A                        // 206
    @SP                        // 207
    A=M                        // 208
    M=D                        // 209
    @SP                        // 210
    M=M+1                      // 211


    // add
    @SP                        // 212
    M=M-1                      // 213
    A=M                        // 214
    D=M                        // 215
    @SP                        // 216
    M=M-1                      // 217
    A=M                        // 218
    M=D+M                      // 219
    @SP                        // 220
    M=M+1                      // 221


    // pop pointer 1
    @SP                        // 222
    M=M-1                      // 223
    @SP                        // 224
    A=M                        // 225
    D=M                        // 226
    @THAT                      // 227
    M=D                        // 228


    // push argument 0
    @0                         // 229
    D=A                        // 230
    @ARG                       // 231
    D=D+M                      // 232
    @addr                      // 233
    M=D                        // 234
    @addr                      // 235
    A=M                        // 236
    D=M                        // 237
    @SP                        // 238
    A=M                        // 239
    M=D                        // 240
    @SP                        // 241
    M=M+1                      // 242


    // push constant 1
    @1                         // 243
    D=A                        // 244
    @SP                        // 245
    A=M                        // 246
    M=D                        // 247
    @SP                        // 248
    M=M+1                      // 249


    // sub
    @SP                        // 250
    M=M-1                      // 251
    A=M                        // 252
    D=M                        // 253
    @SP                        // 254
    M=M-1                      // 255
    A=M                        // 256
    M=M-D                      // 257
    @SP                        // 258
    M=M+1                      // 259


    // pop argument 0
    @ARG                       // 260
    D=M                        // 261
    @0                         // 262
    D=D+A                      // 263
    @addr                      // 264
    M=D                        // 265
    @SP                        // 266
    M=M-1                      // 267
    A=M                        // 268
    D=M                        // 269
    @addr                      // 270
    A=M                        // 271
    M=D                        // 272


    // goto MAIN_LOOP_START
    @MAIN_LOOP_START           // 273
    0;JEQ                      // 274


    // label END_PROGRAM
(END_PROGRAM)
